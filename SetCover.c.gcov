        -:    0:Source:SetCover.c
        -:    0:Graph:SetCover.gcno
        -:    0:Data:SetCover.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * SetCover.c
        -:    3: */
        -:    4:
        -:    5:#include "SetCover.h"
        -:    6:#include <stdio.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <assert.h>
        -:    9:#include <string.h>
        -:   10:#include <stdbool.h>
        -:   11:#include <signal.h>
        -:   12:
        -:   13://buffer used by input statements
        -:   14:char inbuf[1024];
        -:   15:char _file[1024];
        -:   16:
        -:   17:typedef struct Set Set;
        -:   18:
        -:   19:struct Set /* the state of the game at each possible move */
        -:   20:{
        -:   21:	int nGlobalSetSize;
        -:   22:	int nSubSets;
        -:   23:	int* originalOrder;
        -:   24:	int* nSubSetSizes;
        -:   25:	int** subsets;
        -:   26:	int** subSetsSizesSum;
        -:   27:};
        -:   28:
        -:   29:typedef struct Solution Solution;
        -:   30:struct Solution
        -:   31:{
        -:   32:	int nSolutionSize;
        -:   33:	int* subSets;
        -:   34:	int* boolIncluded;
        -:   35:};
        -:   36:
        -:   37:Set* set;
        -:   38:Solution* solution;
        -:   39:Solution* bestSolution;
        -:   40:
    #####:   41:void intHandler(int dummy) {
    #####:   42:	printSolution(bestSolution);
    #####:   43:    exit(0);
        -:   44:}
        -:   45:
       16:   46:void runSetCover(int argc, char *argv[]) {
       16:   47:	if(init_args(argc, argv) == 0) {
       16:   48:		if(readGameFile(_file) == 0) {
       13:   49:			sortSubSets();
       13:   50:			createSolutionStruct();
        -:   51:
       13:   52:			greedy();
        -:   53:
       13:   54:			backTrack4(solution, 0, 0);
        -:   55:
       13:   56:			printSolution(bestSolution);
       13:   57:		}
       16:   58:	}
       10:   59:}
        -:   60:
        -:   61:// int main(int argc, char *argv[]) {
        -:   62:// 	signal(SIGINT, intHandler);
        -:   63:// 	runSetCover(argc, argv);
        -:   64:// 	return 0;
        -:   65:// }
        -:   66:
       11:   67:void greedy() {
        -:   68:	int i;
        -:   69:	int temp;
       11:   70:	bestSolution->nSolutionSize = 0;
       11:   71:	addSubSet(bestSolution, 0);
       11:   72:	int addIndex = 0;
       11:   73:	int addNumber = 0;
        -:   74:
   258003:   75:	while(!checkSolution(bestSolution)) {
   257992:   76:		addIndex = 0;
   257992:   77:		addNumber = 0;
   517170:   78:		for(i=0; i<set->nSubSets; i++) {
   259178:   79:			if(!containsSubSet(bestSolution, i)) {
     1025:   80:				temp = numberOfUncoveredElements(i);
     1025:   81:				if(temp > addNumber) {
       63:   82:					addNumber = temp;
       63:   83:					addIndex = i;
       63:   84:				}
     1025:   85:			}
   259178:   86:		}
   257992:   87:		addSubSet(bestSolution, addIndex);
        -:   88:	}
        -:   89:	//printSolution(bestSolution);
       11:   90:}
        -:   91:
     1025:   92:int numberOfUncoveredElements(int subSetIndex) {
        -:   93:	int i;
     1025:   94:	int count=0;
        -:   95:
     3509:   96:	for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {
     2484:   97:		if(!bestSolution->boolIncluded[set->subsets[subSetIndex][i] - 1])
      997:   98:			count++;
     2484:   99:	}
        -:  100:
     1025:  101:	return count;
        -:  102:}
        -:  103:
        -:  104://This sorts the subsets by size
       13:  105:void sortSubSets() {
        -:  106:	int i,j;
        -:  107:	int tempInt;
        -:  108:	int* tempIntP;
      434:  109:	for(i=0; i<set->nSubSets;++i) {
    19411:  110:		for(j=i+1; j<set->nSubSets; ++j) {
    18990:  111:			if(set->nSubSetSizes[i] < set->nSubSetSizes[j]) {
      217:  112:				tempInt = set->nSubSetSizes[i];
      217:  113:				tempIntP = set->subsets[i];
      217:  114:				set->subsets[i] = set->subsets[j];
      217:  115:				set->subsets[j] = tempIntP;
      217:  116:				set->nSubSetSizes[i] = set->nSubSetSizes[j];
      217:  117:				set->nSubSetSizes[j] = tempInt;
      217:  118:				tempInt = set->originalOrder[i];
      217:  119:				set->originalOrder[i] = set->originalOrder[j];
      217:  120:				set->originalOrder[j] = tempInt;
      217:  121:			}
    18990:  122:		}
      421:  123:	}
        -:  124:	//Get Memory for sizes table
       13:  125:	set->subSetsSizesSum = (int **) malloc(sizeof(int *) * set->nSubSets);
      434:  126:	for(i=0; i<set->nSubSets; i++) {
      421:  127:		set->subSetsSizesSum[i] = (int *) malloc(sizeof(int) * set->nSubSets);
      421:  128:		memset(set->subSetsSizesSum[i], 0, set->nSubSets);
      421:  129:	}
        -:  130:
      434:  131:	for(i=0; i<set->nSubSets; i++) {
      421:  132:		tempInt = 0;
    19832:  133:		for(j=i; j<set->nSubSets; j++) {
    19411:  134:			tempInt += set->nSubSetSizes[j];
    19411:  135:			set->subSetsSizesSum[i][j-i] = tempInt;
    19411:  136:		}
      421:  137:	}
        -:  138:
        -:  139:	//Check
        -:  140:	/*for(i=0; i<set->nSubSets; i++) {
        -:  141:		for(j=0; j<set->nSubSets; j++) {
        -:  142:			printf("%u ", set->subSetsSizesSum[i][j]);
        -:  143:		}
        -:  144:		printf("\n");
        -:  145:	}*/
       13:  146:}
        -:  147:
       13:  148:void createSolutionStruct() {
        -:  149:	int i;
       13:  150:	solution = (Solution *)malloc(sizeof(Solution));
       13:  151:	solution->subSets = (int *)malloc(sizeof(int) * (set->nSubSets));
      434:  152:	for(i=0; i<(set->nSubSets); i++)
      421:  153:		solution->subSets[i] = -1;
       13:  154:	solution->boolIncluded = (int *)malloc(sizeof(int) * set->nGlobalSetSize);
       13:  155:	memset(solution->boolIncluded, 0, set->nGlobalSetSize);
        -:  156:
       13:  157:	bestSolution = (Solution *)malloc(sizeof(Solution));
       13:  158:	bestSolution->subSets = (int *)malloc(sizeof(int) * (set->nSubSets));
      229:  159:	for (i = 0; i < (set->nSubSets); i++)
      216:  160:		bestSolution->subSets[i] = -1;
       13:  161:	bestSolution->boolIncluded = (int *)malloc(sizeof(int) * set->nGlobalSetSize);
       13:  162:	memset(bestSolution->boolIncluded, 0, set->nGlobalSetSize);
       13:  163:	bestSolution->nSolutionSize = set->nSubSets-1;
       13:  164:}
        -:  165:
        7:  166:void copySolutionToBest() {
        -:  167:	int i;
        7:  168:	bestSolution->nSolutionSize = solution->nSolutionSize;
       49:  169:	for(i=0;i<solution->nSolutionSize;i++)
       42:  170:		bestSolution->subSets[i] = solution->subSets[i];
        7:  171:}
        -:  172:
        -:  173:int depth = 0;
        -:  174:
394567177:  175:void backTrack4(Solution* solution, int last, int sum) {
        -:  176:	int i;
        -:  177:
394567177:  178:	if(solution->nSolutionSize >= bestSolution->nSolutionSize)
347208815:  179:		return;
        -:  180:
 47358362:  181:	if(checkSolution(solution)) {
        7:  182:		if(solution->nSolutionSize < bestSolution->nSolutionSize) {
        7:  183:			copySolutionToBest();
        7:  184:			printf("New Solution Size : %u\n",bestSolution->nSolutionSize);
        7:  185:		}
        7:  186:		return;
        -:  187:	}
        -:  188:
441925524:  189:	for(i=last; i<set->nSubSets; i++) {
396024054:  190:		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] < set->nGlobalSetSize)
  1456885:  191:			return;
        -:  192:		//add subset to solution
394567169:  193:		addSubSet(solution, i);
394567169:  194:		sum+=set->nSubSetSizes[i];
        -:  195:		//recure
394567169:  196:		backTrack4(solution, i + 1, sum);
394567169:  197:		sum-=set->nSubSetSizes[i];
        -:  198:		//remove solution
394567169:  199:		removeSubSet(solution, i);
394567169:  200:	}
394567177:  201:}
        -:  202:
394825172:  203:void addSubSet(Solution* solution, int subSetIndex) {
        -:  204:	int i;
394825172:  205:	solution->nSolutionSize++;
394825172:  206:	solution->subSets[solution->nSolutionSize-1] = subSetIndex;
        -:  207:
792861191:  208:	for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {
398036019:  209:		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] += 1;
398036019:  210:	}
        -:  211:
        -:  212:	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {
        -:  213:		printf("%u ",solution->boolIncluded[i]);
        -:  214:	}
        -:  215:	printf("\n");*/
394825172:  216:}
        -:  217:
394567169:  218:void removeSubSet(Solution* solution, int subSetIndex) {
        -:  219:	int i;
394567169:  220:	solution->subSets[solution->nSolutionSize-1] = -1;
394567169:  221:	solution->nSolutionSize--;
        -:  222:
791313204:  223:	for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {
396746035:  224:		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] -= 1;
396746035:  225:	}
394567169:  226:}
        -:  227:
   259178:  228:bool containsSubSet(Solution* solution, int subSetIndex) {
        -:  229:	int i;
        -:  230:
   264360:  231:	for(i=0; i<solution->nSolutionSize; i++) {
   263335:  232:		if(solution->subSets[i] == subSetIndex) {
   258153:  233:			return true;
        -:  234:		}
     5182:  235:	}
        -:  236:
     1025:  237:	return false;
   259178:  238:}
        -:  239:
 47616362:  240:bool checkSolution(Solution* solution) {
        -:  241:	int i;
 47616362:  242:	bool allDone = true;
 98004177:  243:	for(i=0; i<set->nGlobalSetSize; i++) {
 98004162:  244:		int boolInc = solution->boolIncluded[i];
 98004162:  245:		if(boolInc == 0) {
 47616347:  246:			return false;
        -:  247:		}
 50387815:  248:	}
       15:  249:	return allDone;
 47616362:  250:}
        -:  251:
        8:  252:void printSolution(Solution* solution) {
        -:  253:	int i;
        8:  254:	printf("(%u)\n",solution->nSolutionSize);
        -:  255:
       53:  256:	for(i=0; i<solution->nSolutionSize; i++) {
       45:  257:		printf("(%u) ", set->originalOrder[solution->subSets[i]]);
       45:  258:		printSubSet(solution->subSets[i]);
       45:  259:	}
        8:  260:}
        -:  261:
       45:  262:void printSubSet(int nSubSetIndex) {
        -:  263:	int j;
      244:  264:	for (j = 0; j < set->nSubSetSizes[nSubSetIndex]; j++) {
      199:  265:		printf("%u ", set->subsets[nSubSetIndex][j]);
      199:  266:	}
       45:  267:	printf("\n");
       45:  268:}
        -:  269:
      461:  270:bool GetALine(FILE *f, char buf[]) {
        -:  271:	/* Read a line of possibly commented input from the file *f.*/
        -:  272:	char *p;
      461:  273:	bool not_eof = false;
      462:  274:	while ( fgets(buf, 1024, f) != NULL) {
      449:  275:		p=strchr(buf, (int) '\n');
      449:  276:		if ( p != NULL )
      442:  277:			*p = '\0';
        -:  278:
      449:  279:		if (*buf != '\0') {
      448:  280:			not_eof = true;
      448:  281:			break;
        -:  282:		}
        -:  283:	}
      461:  284:	return (not_eof);
        -:  285:}
        -:  286:
       15:  287:int readGameFile(const char *s) {
        -:  288:	FILE *f;
       15:  289:	int lineno=0, i=0;
       15:  290:	int subSetSize=0;
       15:  291:	int nCurrSubSet=0;
        -:  292:	char * pch;
        -:  293:	char buf[1024];
        -:  294:
       15:  295:	if(s==NULL)	
    #####:  296:		return 1;
        -:  297:	//printf("%s\n", s);
       15:  298:	f = fopen(s, "r");
       15:  299:	if(f == NULL) {
        2:  300:		printf("Could not open file\n");
        2:  301:		return 1;
        -:  302:	}
        -:  303:
       13:  304:	set = (Set *)malloc(sizeof(Set));
        -:  305:
      460:  306:	while(GetALine(f, inbuf)) {
        -:  307:
      447:  308:		switch(lineno) {
        -:  309:		case 0:
       13:  310:			set->nGlobalSetSize = atoi(inbuf);
       13:  311:			break;
        -:  312:		case 1:
       12:  313:			set->nSubSets = atoi(inbuf);
       12:  314:			set->nSubSetSizes = (int *) malloc(sizeof(int) * set->nSubSets);
       12:  315:			set->originalOrder = (int *) malloc(sizeof(int) * set->nSubSets);
      433:  316:			for(i=0; i<set->nSubSets; i++) {
      421:  317:				set->originalOrder[i] = i+1;
      421:  318:			}
       12:  319:			set->subsets = (int**) malloc(sizeof(int*) * set->nSubSets);
       12:  320:			break;
        -:  321:		default:
      422:  322:			subSetSize = 0;
      422:  323:			strcpy(buf, inbuf);
        -:  324:
      422:  325:			pch = strtok(inbuf, " ");
     1915:  326:			while (pch != NULL) {
     1493:  327:				subSetSize++;
     1493:  328:				pch = strtok(NULL, " ");
        -:  329:			}
        -:  330:
      422:  331:			set->nSubSetSizes[nCurrSubSet] = subSetSize;
      422:  332:			set->subsets[nCurrSubSet] = (int *) malloc(sizeof(int) * subSetSize);
        -:  333:
      422:  334:			i = 0;
      422:  335:			pch = strtok(buf, " ");
     1907:  336:			while (pch != NULL) {
     1485:  337:				set->subsets[nCurrSubSet][i] = atoi(pch);
     1485:  338:				i++;
     1485:  339:				pch = strtok(NULL, " ");
        -:  340:			}
        -:  341:
      422:  342:			nCurrSubSet++;
      422:  343:		}
        -:  344:
      447:  345:		lineno++;
        -:  346:	}
       13:  347:	return 0;
       15:  348:}
        -:  349:
       16:  350:int init_args(int argc, char **argv) {
       16:  351:	char str[1024], *opts[] = { "-f" }; /* valid options */
       16:  352:	int valopts[] = { 1 }; /* indicates options with values */
        -:  353:	/* 0=none, 1=required, -1=optional */
        -:  354:	int i, /* looper through all cmdline arguments */
        -:  355:	a, /* current valid argument-value position */
        -:  356:	op, /* position number of found option */
       16:  357:	nopts = sizeof(opts) / sizeof(char *);
        -:  358:
       16:  359:	a = 1;
       32:  360:	for (i = 1; i <= nopts; i++) {
       16:  361:		if (a >= argc)
    #####:  362:			break;
        -:  363:
        -:  364:		/* figure out which option by its position 0-(nopts-1) */
       16:  365:		for (op = 0; op < nopts; op++) {
       16:  366:			if (strncmp(opts[op], argv[a], 2) == 0) {
       16:  367:				break; /* found it, move on */
        -:  368:			}
    #####:  369:		}
       16:  370:		if (op == nopts) {
    #####:  371:			fprintf(stderr, "Invalid option %s\n", argv[a]);
    #####:  372:			printf("%s\n", "Pancake requires an input file. Use -f filename.txt");
    #####:  373:			return 1;
        -:  374:		}
        -:  375:
       16:  376:		*str = '\0';
        -:  377:		/* extract value part of option-value pair */
       16:  378:		if (valopts[op]) {
       16:  379:			if ('\0' != argv[a][2]) { /* no space betw opt-value */
    #####:  380:				strcpy(str, (argv[a] + 2));
       16:  381:			} else if ('-' != *argv[a + 1]) { /* space betw opt-value */
       16:  382:				strcpy(str, argv[++a]);
       16:  383:			} else if (0 < valopts[op]) { /* required opt-val not found */
    #####:  384:				fprintf(stderr, "Incomplete option %s\n", opts[op]);
    #####:  385:				printf("%s\n", "Pancake requires an input file. Use -f filename.txt");
    #####:  386:				return 1;
        -:  387:			} /* opt-val not required */
       16:  388:		}
        -:  389:
        -:  390:		/* tell us what to do here                   */
        -:  391:		/* set indicators/variables based on results */
       16:  392:		switch (op) {
        -:  393:		case 0: /* -d */
       16:  394:			strcpy(_file, str);
       16:  395:			break; /* -f */
        -:  396:		default:
    #####:  397:			fprintf(stderr, "Programmer: bad option in main:init_args:switch");
    #####:  398:		}
        -:  399:
       16:  400:		a++; /* move to next valid arg-value position */
        -:  401:
       16:  402:	} /* end for(i) */
       16:  403:	return 0;
       16:  404:}
